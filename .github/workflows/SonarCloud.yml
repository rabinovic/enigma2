name: SonarCloud
on:
  workflow_dispatch:
#  push:
#    branches:
#      - 7.0
#  pull_request:
#    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.4.0.2170
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: Install libraries
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get -q update
          sudo apt-get install g++-10
          sudo apt-get install linux-libc-dev
          sudo apt-get install git
          sudo apt-get install build-essential
          sudo apt-get install automake
          sudo apt-get install libtool
          sudo apt-get install python3.9-dev
          sudo apt-get install zlib1g-dev
          sudo apt-get install gettext
          sudo apt-get install swig
          sudo apt-get install libgstreamer1.0-dev
          sudo apt-get install libgstreamer-plugins-base1.0-dev
          sudo apt-get install libfreetype6-dev
          sudo apt-get install libsigc++-2.0-dev
          sudo apt-get install libfribidi-dev
          sudo apt-get install libssl-dev
          sudo apt-get install libavahi-client-dev
          sudo apt-get install libjpeg-turbo8-dev
          sudo apt-get install libgif-dev

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: '7.0'

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          
      - name: Build enigma2 dependencies
        env:
          CC: "gcc-10"
          CXX: "g++-10"
        run: |
          echo "installing libdvbsi++"
          pushd .
          cd /tmp
          git clone --depth 1 https://github.com/oe-alliance/libdvbsi.git
          cd libdvbsi
          autoreconf -i
          ./configure
          make
          sudo make install
          popd
          echo "installing tuxbox"
          pushd .
          cd /tmp
          git clone --depth 1 https://github.com/OpenPLi/tuxtxt.git
          cd tuxtxt/libtuxtxt
          autoreconf -i
          ./configure --with-boxtype=generic DVB_API_VERSION=5
          make
          sudo make install
          cd ../tuxtxt
          autoreconf -i
          ./configure --with-boxtype=generic DVB_API_VERSION=5
          make
          sudo make install
          popd

      - name: Run build-wrapper
        env:
          CC: "gcc-10"
          CXX: "g++-10"
        run: |
          sed -i 's/include lib main data po tools/include lib main tools/g' Makefile.am
          autoreconf -i
          ./configure --with-libsdl=no --with-boxtype=nobox --enable-dependency-tracking ac_cv_prog_c_openmp=-fopenmp --with-gstversion=1.0 --with-textlcd
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"